import jcs from "jscodeshift";
import { transformNextAppRouterValProvider } from "./codemods/app/transformNextAppRouterValProvider";
import { diffLines } from "diff";
import chalk from "chalk";

const APP_ROUTER_LAYOUT_SANS_VAL_PROVIDER = `import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        {children}
      </body>
    </html>
  );
}
`;

describe("codemods", () => {
  test("init ValProvider layout", async () => {
    const res = transformNextAppRouterValProvider(
      {
        path: "./app/layout.tsx",
        source: APP_ROUTER_LAYOUT_SANS_VAL_PROVIDER,
      },
      {
        j: jcs,
        jscodeshift: jcs.withParser("tsx"),
        stats: () => {},
        report: () => {},
      },
      {
        configImportPath: "../val.config",
      }
    );

    const diff = diffLines(APP_ROUTER_LAYOUT_SANS_VAL_PROVIDER, res, {});

    let s = "";
    diff.forEach((part, i) => {
      if (part.added) {
        s += chalk.green(part.value);
      } else if (part.removed) {
        s += chalk.red(part.value);
      } else {
        s += part.value;
      }
    });
    console.log(res);
    expect(res).toEqual(`import { ValProvider } from "@valbuild/next";
import { config } from "../val.config";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    (<html lang="en">
      <body className={inter.className}>
        <ValProvider config={config}>{children}</ValProvider>
      </body>
    </html>)
  );
}
`);
  });
});
