import jcs from "jscodeshift";
import { transformNextAppRouterValProvider } from "./codemods/transformNextAppRouterValProvider";
import { addEslintPluginToEslintMjs } from "./codemods/addEslintPluginToEslintMjs";

const APP_ROUTER_LAYOUT_SANS_VAL_PROVIDER = `import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        {children}
      </body>
    </html>
  );
}
`;

describe("codemods", () => {
  test("init ValProvider layout", async () => {
    const res = transformNextAppRouterValProvider(
      {
        path: "./app/layout.tsx",
        source: APP_ROUTER_LAYOUT_SANS_VAL_PROVIDER,
      },
      {
        j: jcs,
        jscodeshift: jcs.withParser("tsx"),
        stats: () => {},
        report: () => {},
      },
      {
        configImportPath: "../val.config",
      },
    );
    expect(res).toEqual(`import { ValProvider } from "@valbuild/next";
import { config } from "../val.config";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    (<html lang="en">
      <body className={inter.className}>
        <ValProvider config={config}>{children}</ValProvider>
      </body>
    </html>)
  );
}
`);
  });

  test("add eslint plugin to eslint.config.mjs generated by create-next-app", async () => {
    const res = addEslintPluginToEslintMjs(
      {
        path: "./eslint.config.mjs",
        source: `import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
`,
      },
      {
        j: jcs,
        jscodeshift: jcs,
        stats: () => {},
        report: () => {},
      },
      {
        configImportPath: "../val.config",
      },
    );
    expect(res).toEqual(`import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript", "plugin:@valbuild/recommended"),
];

export default eslintConfig;
`);
  });
});
